int main(){
    int lenght;   // Variable to store the length of the input buffer
    int exit_res, signal_res;  // Variables to store the exit and signal status of the child process
    write(1, WELCOME_MSG, strlen(WELCOME_MSG)); // Writes the welcome message to the standard output

 while(1){
        char buffer[10] = "";  // Input buffer
        int status, exit_status, signal_status; // Variables to store the status of the child process
        write(1,"\nenseash",8);  // Writes the enseash prompt to the standard output

        if (exit_res == 1){
            write(1," [exit:",7); // Writes the exit status to the standard output
            char exit_status_str[10]; //Variable to store the exit status string
            int i = 0;
            int val = exit_status;
            if (val == 0) {
                exit_status_str[i++] = '0';
            }
            else {
                while (val) {
                    exit_status_str[i++] = (val % 10) + '0';
                    val /= 10;
                }
            }
            write(1, exit_status_str, i);
            write(1,"]",1);
		
        }

        if (signal_res == 1){    
            write(1," [signal:",9);  // Writes the signal status to the standard output
            char signal_status_str[10]; //Variable to store the signal status string
            int i = 0;
            int val = signal_status;
            if (val == 0) {
                signal_status_str[i++] = '0';
            }
            else {
                while (val) {
                    signal_status_str[i++] = (val % 10) + '0';
                    val /= 10;
                }
            }

           write(1, signal_status_str, i);
            write(1,"]",1);
        }

        write(1," % ",3);  // Writes the prompt symbol to the standard output
        
        lenght = read(0, buffer,10);  // Reads input from the standard input
        buffer[lenght-1] = 0;  //null terminates the input buffer

        exit_res = 0; //set exit_res to 0
        signal_res = 0; //set signal_res to 0
        pid_t pid = fork(); // creates a child process
        if (pid == 0) {         
            execlp(buffer,buffer,(char*) NULL); // Execute the input command using the execlp() system call
            exit(EXIT_SUCCESS);  
        }
        else{    
            wait(&status);
            if (WIFEXITED(status)){ 
                exit_status = WEXITSTATUS(status);
                exit_res = 1;
            }

           else if(WIFSIGNALED(status)){ 
                signal_status = WTERMSIG(status);
                signal_res = 1;
            }
        }

        if(strcmp(buffer,"exit") == 0){
            break;
        }
        
        if(lenght == 0){
            break;
        }
    }
    write(1,BYEMSG,strlen(BYEMSG));
    return 0;
}
